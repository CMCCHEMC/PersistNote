package habit.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import habit.dao.HabitRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table HABIT_RECORD.
*/
public class HabitRecordDao extends AbstractDao<HabitRecord, Void> {

    public static final String TABLENAME = "HABIT_RECORD";

    /**
     * Properties of entity HabitRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property HabitId = new Property(0, long.class, "habitId", false, "HABIT_ID");
        public final static Property HabitName = new Property(1, String.class, "habitName", false, "HABIT_NAME");
        public final static Property PersistCount = new Property(2, Integer.class, "persistCount", false, "PERSIST_COUNT");
        public final static Property IconUrl = new Property(3, String.class, "iconUrl", false, "ICON_URL");
    };


    public HabitRecordDao(DaoConfig config) {
        super(config);
    }
    
    public HabitRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'HABIT_RECORD' (" + //
                "'HABIT_ID' INTEGER NOT NULL ," + // 0: habitId
                "'HABIT_NAME' TEXT NOT NULL ," + // 1: habitName
                "'PERSIST_COUNT' INTEGER," + // 2: persistCount
                "'ICON_URL' TEXT);"); // 3: iconUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'HABIT_RECORD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HabitRecord entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getHabitId());
        stmt.bindString(2, entity.getHabitName());
 
        Integer persistCount = entity.getPersistCount();
        if (persistCount != null) {
            stmt.bindLong(3, persistCount);
        }
 
        String iconUrl = entity.getIconUrl();
        if (iconUrl != null) {
            stmt.bindString(4, iconUrl);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public HabitRecord readEntity(Cursor cursor, int offset) {
        HabitRecord entity = new HabitRecord( //
            cursor.getLong(offset + 0), // habitId
            cursor.getString(offset + 1), // habitName
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // persistCount
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // iconUrl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HabitRecord entity, int offset) {
        entity.setHabitId(cursor.getLong(offset + 0));
        entity.setHabitName(cursor.getString(offset + 1));
        entity.setPersistCount(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setIconUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(HabitRecord entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(HabitRecord entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
